<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Elasticsearch" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <longProp name="ThreadGroup.start_time">1415114473000</longProp>
        <longProp name="ThreadGroup.end_time">1415114473000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${esHost}</stringProp>
          <stringProp name="HTTPSampler.port">${esPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="thread" elementType="Argument">
              <stringProp name="Argument.name">thread</stringProp>
              <stringProp name="Argument.value">${__P(THREAD,10)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rampUp" elementType="Argument">
              <stringProp name="Argument.name">rampUp</stringProp>
              <stringProp name="Argument.value">${__P(RAMP_UP,10)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loop" elementType="Argument">
              <stringProp name="Argument.name">loop</stringProp>
              <stringProp name="Argument.value">${__P(LOOP,10)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="esHost" elementType="Argument">
              <stringProp name="Argument.name">esHost</stringProp>
              <stringProp name="Argument.value">${__P(ES_HOST,localhost)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="esPort" elementType="Argument">
              <stringProp name="Argument.name">esPort</stringProp>
              <stringProp name="Argument.value">${__P(ES_PORT,80)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="csvData" elementType="Argument">
              <stringProp name="Argument.name">csvData</stringProp>
              <stringProp name="Argument.value">${__P(CSV_DATA,CSV_DATA)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="indiceName" elementType="Argument">
              <stringProp name="Argument.name">indiceName</stringProp>
              <stringProp name="Argument.value">${__P(ES_INDEX,ES_INDEX)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="indiceType" elementType="Argument">
              <stringProp name="Argument.name">indiceType</stringProp>
              <stringProp name="Argument.value">${__P(ES_TYPE,ES_TYPE)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${csvData}</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">QUERY</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T01_Recherche_Simple" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;query&quot;: {&#xd;
		&quot;match&quot;: {&#xd;
			&quot;reds:identity.reds:titles.en&quot;: &quot;${QUERY}&quot;	&#xd;
		}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${indiceName}/${indiceType}/_search</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T01_Recherche_Complexe" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;from&quot; : 0,&#xd;
    &quot;size&quot; : 10,&#xd;
    &quot;sort&quot; : [&#xd;
        &quot;_score&quot;,&#xd;
        {&quot;reds:identity.reds:creationDate&quot; : {&quot;order&quot; : &quot;desc&quot;}}&#xd;
    ],&#xd;
    &quot;track_scores&quot;: true,&#xd;
    &quot;query&quot; : {&#xd;
        &quot;filtered&quot; : {&#xd;
            &quot;query&quot;: {&#xd;
                &quot;multi_match&quot;: {&#xd;
                    &quot;query&quot;: &quot;${QUERY}&quot;,&#xd;
                    &quot;lenient&quot;: true,&#xd;
                    &quot;fields&quot;: [&quot;reds:identity.reds:reference^5&quot;, &quot;reds:identity.reds:titles.*^3&quot;, &quot;reds:identity.reds:thesaurus.*.labels.*^2&quot;, &quot;reds:documents.*&quot;]&#xd;
                }&#xd;
            },&#xd;
            &quot;filter&quot;: {&#xd;
                &quot;not&quot; : {&#xd;
                    &quot;filter&quot; : {&#xd;
                        &quot;or&quot; : {&#xd;
                            &quot;filters&quot; : [ {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:DirContDossier&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Prv_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Prv_Sit&quot;&#xd;
                              }&#xd;
                            } ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${indiceName}/${indiceType}/_search</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T01_Recherche_Complexe_Highlight" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;from&quot; : 0,&#xd;
    &quot;size&quot; : 10,&#xd;
    &quot;sort&quot; : [&#xd;
        &quot;_score&quot;,&#xd;
        {&quot;reds:identity.reds:creationDate&quot; : {&quot;order&quot; : &quot;desc&quot;}}&#xd;
    ],&#xd;
    &quot;track_scores&quot;: true,   &#xd;
    &quot;query&quot; : {&#xd;
        &quot;filtered&quot; : {&#xd;
            &quot;query&quot;: {&#xd;
                &quot;multi_match&quot;: {&#xd;
                    &quot;query&quot;: &quot;${QUERY}&quot;,&#xd;
                    &quot;lenient&quot;: true,&#xd;
                    &quot;fields&quot;: [&quot;reds:identity.reds:reference^5&quot;, &quot;reds:identity.reds:titles.*^3&quot;, &quot;reds:identity.reds:thesaurus.*.labels.*^2&quot;, &quot;reds:documents.*&quot;]&#xd;
                }&#xd;
            },&#xd;
            &quot;filter&quot;: {&#xd;
                &quot;not&quot; : {&#xd;
                    &quot;filter&quot; : {&#xd;
                        &quot;or&quot; : {&#xd;
                            &quot;filters&quot; : [ {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:DirContDossier&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Prv_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Prv_Sit&quot;&#xd;
                              }&#xd;
                            } ]&#xd;
                        }&#xd;
                    }&#xd;
               }&#xd;
           }&#xd;
       }&#xd;
    },&#xd;
    &quot;highlight&quot; : {&#xd;
        &quot;fields&quot; : {&#xd;
            &quot;reds:identity.reds:titles.*&quot; : { &quot;number_of_fragments&quot; : 0 },&#xd;
            &quot;reds:documents.*&quot; : { },&#xd;
            &quot;reds:identity.reds:reference&quot; : { },&#xd;
            &quot;reds:identity.reds:thesaurus.*.labels.*&quot; : { }&#xd;
        }&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${indiceName}/${indiceType}/_search</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T01_Recherche_Complexe_Highlight2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;from&quot; : 0,&#xd;
    &quot;size&quot; : 10,&#xd;
    &quot;sort&quot; : [&#xd;
        &quot;_score&quot;,&#xd;
        {&quot;reds:identity.reds:creationDate&quot; : {&quot;order&quot; : &quot;desc&quot;}}&#xd;
    ],&#xd;
    &quot;track_scores&quot;: true,   &#xd;
    &quot;query&quot; : {&#xd;
        &quot;filtered&quot; : {&#xd;
            &quot;query&quot;: {&#xd;
                &quot;multi_match&quot;: {&#xd;
                    &quot;query&quot;: &quot;${QUERY}&quot;,&#xd;
                    &quot;lenient&quot;: true,&#xd;
                    &quot;fields&quot;: [&quot;reds:identity.reds:reference^5&quot;, &quot;reds:identity.reds:titles.*^3&quot;, &quot;reds:identity.reds:thesaurus.*.labels.*^2&quot;, &quot;reds:documents.*&quot;]&#xd;
                }&#xd;
            },&#xd;
            &quot;filter&quot;: {&#xd;
                &quot;not&quot; : {&#xd;
                    &quot;filter&quot; : {&#xd;
                        &quot;or&quot; : {&#xd;
                            &quot;filters&quot; : [ {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:DirContDossier&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Prv_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Prv_Sit&quot;&#xd;
                              }&#xd;
                            } ]&#xd;
                        }&#xd;
                    }&#xd;
               }&#xd;
           }&#xd;
       }&#xd;
    },&#xd;
    &quot;highlight&quot; : {&#xd;
        &quot;require_field_match&quot; : true,&#xd;
        &quot;fields&quot; : {&#xd;
            &quot;reds:identity.reds:titles.*&quot; : { &quot;number_of_fragments&quot; : 0 },&#xd;
            &quot;reds:documents.*&quot; : { },&#xd;
            &quot;reds:identity.reds:reference&quot; : { },&#xd;
            &quot;reds:identity.reds:thesaurus.*.labels.*&quot; : { }&#xd;
        }&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${indiceName}/${indiceType}/_search</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T01_Recherche_Complexe_Facet" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;from&quot; : 0,&#xd;
    &quot;size&quot; : 10,&#xd;
    &quot;sort&quot; : [&#xd;
        &quot;_score&quot;,&#xd;
        {&quot;reds:identity.reds:creationDate&quot; : {&quot;order&quot; : &quot;desc&quot;}}&#xd;
    ],&#xd;
    &quot;track_scores&quot;: true,   &#xd;
    &quot;query&quot; : {&#xd;
        &quot;filtered&quot; : {&#xd;
            &quot;query&quot;: {&#xd;
                &quot;multi_match&quot;: {&#xd;
                    &quot;query&quot;: &quot;#QUERY#&quot;,&#xd;
                    &quot;lenient&quot;: true,&#xd;
                   &quot;fields&quot;: [&quot;reds:identity.reds:reference^5&quot;, &quot;reds:identity.reds:titles.*^3&quot;, &quot;reds:identity.reds:thesaurus.*.labels.*^2&quot;, &quot;reds:documents.*&quot;]&#xd;
                }&#xd;
            },&#xd;
            &quot;filter&quot;: {&#xd;
                &quot;not&quot; : {&#xd;
                    &quot;filter&quot; : {&#xd;
                        &quot;or&quot; : {&#xd;
                            &quot;filters&quot; : [ {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:DirContDossier&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlPv-Prv_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Fnl_Sit&quot;&#xd;
                              }&#xd;
                            }, {&#xd;
                              &quot;term&quot; : {&#xd;
                                &quot;reds:identity.reds:type.facet&quot; : &quot;reds:iPlCre-Prv_Sit&quot;&#xd;
                              }&#xd;
                            } ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    },&#xd;
    &quot;aggs&quot;: {&#xd;
        &quot;reds-identity_reds-creationDate&quot;: {&#xd;
            &quot;date_histogram&quot;: {&#xd;
                &quot;field&quot;: &quot;reds:identity.reds:creationDate&quot;,&#xd;
                &quot;interval&quot;: &quot;year&quot;,&#xd;
                &quot;format&quot; : &quot;yyyy&quot;,&#xd;
                &quot;order&quot; : { &quot;_key&quot; : &quot;desc&quot; }&#xd;
            }&#xd;
        },&#xd;
        &quot;reds-identity_reds-type_facet&quot;: {&#xd;
            &quot;terms&quot;: {&#xd;
                &quot;field&quot;: &quot;reds:identity.reds:type.facet&quot;,&#xd;
                &quot;size&quot;: 10&#xd;
            }&#xd;
        },&#xd;
        &quot;reds-identity_reds-leg&quot;: {&#xd;
            &quot;terms&quot;: {&#xd;
                &quot;field&quot;: &quot;reds:identity.reds:leg&quot;,&#xd;
                &quot;order&quot; : { &quot;_term&quot; : &quot;desc&quot; },&#xd;
                &quot;size&quot;: 10&#xd;
            }&#xd;
        },&#xd;
        &quot;reds-identity_reds-persons_reds-fullName_facet&quot;: {&#xd;
            &quot;terms&quot;: {&#xd;
                &quot;field&quot;: &quot;reds:identity.reds:persons.reds:fullName.facet&quot;,&#xd;
                &quot;size&quot;: 10&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${indiceName}/${indiceType}/_search</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
